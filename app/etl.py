import pandas as pd
import os
from sqlalchemy.orm import Session
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy import text
from .database import engine, SessionLocal
from .models import Provider, Base

def create_tables():
    """Create all tables in the database"""
    try:
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Database tables created successfully")
    except Exception as e:
        print(f"‚ùå Error creating tables: {e}")
        raise

def load_csv_data():
    """Load data from CSV file and populate the database"""
    csv_file = "MUP_INP_RY24_P03_V10_DY22_PrvSvc.csv"
    
    if not os.path.exists(csv_file):
        print(f"CSV file {csv_file} not found!")
        return
    
    # Try different approaches to read the CSV file
    df = None
    
    # Method 1: Try with error handling
    try:
        print("Trying to read CSV with error handling...")
        df = pd.read_csv(
            csv_file,
            encoding='utf-8',
            on_bad_lines='skip',
            low_memory=False
        )
        print("‚úÖ Successfully read CSV with error handling")
    except Exception as e:
        print(f"‚ùå Error with error handling: {e}")
        
        # Method 2: Try with different encoding
        try:
            print("Trying with latin-1 encoding...")
            df = pd.read_csv(
                csv_file,
                encoding='latin-1',
                on_bad_lines='skip',
                low_memory=False
            )
            print("‚úÖ Successfully read CSV with latin-1 encoding")
        except Exception as e:
            print(f"‚ùå Error with latin-1 encoding: {e}")
            
            # Method 3: Try with cp1252 encoding
            try:
                print("Trying with cp1252 encoding...")
                df = pd.read_csv(
                    csv_file,
                    encoding='cp1252',
                    on_bad_lines='skip',
                    low_memory=False
                )
                print("‚úÖ Successfully read CSV with cp1252 encoding")
            except Exception as e:
                print(f"‚ùå Error with cp1252 encoding: {e}")
                
                # Method 4: Last resort - read with errors='replace'
                try:
                    print("Trying with error replacement...")
                    df = pd.read_csv(
                        csv_file,
                        encoding='utf-8',
                        on_bad_lines='skip',
                        low_memory=False,
                        error_bad_lines=False,
                        warn_bad_lines=False
                    )
                    print("‚úÖ Successfully read CSV with error replacement")
                except Exception as e:
                    print(f"‚ùå All methods failed: {e}")
                    return
    
    if df is None:
        print("‚ùå Failed to read CSV file with any method")
        return
    
    print(f"üìä Loaded {len(df)} rows from CSV file")
    
    # Create database session
    db = SessionLocal()
    
    try:
        # Test database connection
        print("Testing database connection...")
        db.execute(text("SELECT 1"))
        print("‚úÖ Database connection successful")
        
        # Clear existing data
        print("Clearing existing data...")
        deleted_count = db.query(Provider).delete()
        db.commit()
        print(f"‚úÖ Cleared {deleted_count} existing records")
        
        # Process each row
        processed_count = 0
        error_count = 0
        
        for index, row in df.iterrows():
            try:
                # Map CSV columns to database columns with proper type conversion
                # UUID will be auto-generated by SQLAlchemy
                provider = Provider(
                    provider_id=str(row['Rndrng_Prvdr_CCN']).strip(),
                    provider_name=str(row['Rndrng_Prvdr_Org_Name']).strip(),
                    provider_city=str(row['Rndrng_Prvdr_City']).strip(),
                    provider_state=str(row['Rndrng_Prvdr_State_Abrvtn']).strip(),
                    provider_zip_code=str(row['Rndrng_Prvdr_Zip5']).strip(),
                    ms_drg_definition=str(row['DRG_Cd']).strip(),
                    total_discharges=int(float(row['Tot_Dschrgs'])),
                    average_covered_charges=float(row['Avg_Submtd_Cvrd_Chrg']),
                    average_total_payments=float(row['Avg_Tot_Pymt_Amt']),
                    average_medicare_payments=float(row['Avg_Mdcr_Pymt_Amt'])
                )
                
                db.add(provider)
                processed_count += 1
                
                # Commit in batches to avoid memory issues
                if processed_count % 1000 == 0:
                    db.commit()
                    print(f"Processed {processed_count} records...")
                
            except Exception as e:
                error_count += 1
                print(f"Error processing row {index + 1}: {e}")
                print(f"Row data: {row.to_dict()}")
                continue
        
        # Final commit
        db.commit()
        print(f"‚úÖ Successfully processed {processed_count} records into the database")
        if error_count > 0:
            print(f"‚ö†Ô∏è  {error_count} records had errors and were skipped")
        
    except SQLAlchemyError as e:
        print(f"‚ùå Database error: {e}")
        if db.is_active:
            db.rollback()
    except Exception as e:
        print(f"‚ùå Error loading CSV data: {e}")
        if db.is_active:
            db.rollback()
    finally:
        db.close()

def run_etl():
    """Run the complete ETL process"""
    print("Creating database tables...")
    create_tables()
    
    print("Loading CSV data...")
    load_csv_data()
    
    print("ETL process completed!") 